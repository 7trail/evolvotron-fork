Proximity to one end or the other of this list does not necessarily
imply it will be done sooner or later than other items!

- More functions (reflection from environment, Perlin noise).
- More iterative functions
- Get rid of silly xyz and matrix dependence on general tuples and templates.
  (Can be optimised, but only with heavyweight compile options.)
- Spawn recoloured could be linear, quadratic, or generalised versions.
- Compute volumes in Z direction.
  Oscillate z co-ordinate with time.
- Locked attribute should be an image property, not a display property.
  (Would play nicer with Undo)
- Create registry of all function node types
  - use to bring up a panel for setting relative frequencies (check for exploding branching ratios)
  - Allow iterative/allow fractal would then become convenience buttons for quick-setting a whole group of frequencies
- Undo needs to save more state to work properly (e.g state for respawn)
- Have a function type which can suck in random images from directories of images
  (specified by environmental variable ?)
- Check spew of tasks from drag-adjust can't get out of order in multithread compute farm and come back in wrong order
  (associate tasks with an original image instance/serial number as well as an originating display ?)
- Optimise drag: just recompute new area (needs image subregions for tasks).
- Option (default on) to automatitcally respawn boring constant images as soon
  as they've been computed to a certain resolution.
- Pure command line tools to mutate a saved file (generates more xml files from an xml file)
  and render a saved file (generates image file from an xml file).
- Web front end to commandline tools: an evolvotron web-server.
- Command line option for border around images... indicate locked status.
- Maybe add "view" menu: like warp but just applying to current image (like drag)
  (would need explicit control over amounts: maybe drag approach better ?).
- Last method used should point to an object encapsulating the behaviour
  (so warp spawn method can encapsulate a transform factory).
  Needed for breeding behaviour (so can keep 2 last images).
- Undo needs to restore _last_spawned too (but do above first and keep hisory of spawn methods).
- Combining/breeding image pairs.
  Use drag-and-drop
  Either:
    Create a new top level node with 2 or more args and add the parents to it.
    Create a new random stub and insert the parents at random points.
    Insert one image at a random point into the other.
    Concatenate (function compose) the 2 images.
- Add control over MutatableImageNodePositionTransformedQuadratic vs MutatableImageNodePositionTransformed proportions
  (do as part of rationalising all of function selection)
- Command line option to enable/disable fractal and iterative types.
- Replace/augment "Lock" with a "save" or "put-aside" window (could make history/undo simpler).
- "Unlock all" on edit menu
- Reset & Restart should bring up modal "are you sure" dialog box which can also contain check boxes for what to reset:
    mutation parameters
    function freqencies (when implemented)
    locked displays
- Quit should bring up "are you sure" dialog.
- Option to increase number of iterations of certain types of iterative node in an image (i.e "accuracy")
  (probably makes sense for Mandelbrot/Julia or a sampling blur where it just increases the detail, 
  but less useful for repeated function mapping).
- "Move all locked to start" on edit menu
  (or move them to a "safe area", or save them in reloadable form).
- Save whole grid as a single image (from File menu).
- Save whole grid to an XML file.
- Context menu option to bring up info about an image
  (in particular number of nodes and max depth)
- Reference counting for images
  (far too much deepcloning currently; e.g to tasks and history).
  But if it ain't broken don't fix it.
- Use hourglass cursor over displays which haven't got final high resolution yet ?
  (Really need combined hourglass/pointer cursor but Qt doesn't have one built in).
- Computing zero co-ordinate sometimes gives unusual output (black lines across images).
  Avoid by jittering co-ordinate (would break up jaggies), or just avoid exact zero ?
- Why stop at screen resolution ? Antialiasing by supersampling.
- Separate tool (?) to evolve images towards a given image.
  How close would it get and how quickly ?  
  Would the process of getting there be interesting (e.g as an animation) ?
- Compute farms on multiple remote machines.
- Tasks should be a tile of an image
  (multiple compute threads could work on single "Big" images then).
- Menu options to add/remove rows/columns from display grid
- Autocool of mutation parameters
  (probably shouldn't be on by default; control from command line).
- Heat/cool etc should act in proportion to current values
  (probably wanted for autocool).
- Evolve other things
  e.g parameters of celluar automata/reaction diffusion equations/iterated function systems.
- Special reset which uses iterative types to set up nothing but Mandelbrot/Julia-set type functions.
- Rationalise MutatableImageNode::stub so more work is done by Node constructors
  (just pass in a MutationParameters).  Have to keep existing ctor. form for deepclone though.
- Avoid misleading moire patterns by jittering samples
- No low-res images option for when using remotely via X11 over slow link
  (they take longer to display than compute).


