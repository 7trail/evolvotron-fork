ABOUT
=====
[This was the original "Project Purpose and Summarization" for sourceforge.]

Evolvotron
Interactive "generative art" software to evolve images/textures/patterns through 
an iterative process of random mutation and user-selection driven evolution.  
If you like lava lamps, and still think the Mandelbrot set is cool, this could 
be the software for you.

Coded using C++ and STL.  Uses Qt GUI libraries.  Multithreaded.

LICENSE
=======
This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

[The license should be in the LICENSE file in this directory]

BUILDING
========
This has only been tested on RedHat8.0, but there's no reason it shouldn't
work on any platform with a correctly set up qmake.

You should just be able to do

  ./BUILD

(All this does is a qmake followed by a make!)

This should give you a "evolvotron" executable which you can run with
  ./evolvotron
or install where you like.

USAGE
=====
You will need a fast machine, or patience.

Command line options:
  -geometry <width>x<height> : usual Qt/X option to set on-screen size in pixels
  -g <rows> <cols> : sets number of image display cells (defaults 8 by 6)
  -t <threads> : sets number of compute threads (defaults to 2)

On starting the app, a grid of images is displayed.
(For some reason the default is quite small: you'll 
probably want to resize/fullscreen the window to be larger).

Repeat the following until bored:
 - Click (singleclick) on an image you like to 
   spawn the next generation of its mutant offspring.
 - Wait until variations on it are regenerated in sufficient 
   detail that you can decide which one you like best again.

IMPORTANT: Initially you should select images with some sort of variation.
It can take quite a few generations before you get something more interesting
than a simple gradient.  If you select a uniform image, you may get stuck
in a degenerate zone with little to mutate and therefore little chance of
escape to a more interesting area.  You can always restart from the "File" menu.

Right clicking on an image gets you a few more options:
 - "Respawn" regenerates just the current image from whatever it was spawned from
   (and using recolour or warp, if that's what was used to produce it).
   The main use of this is to make your grid of images look nice
   by regenerating any which aren't up to scratch.
 - "Spawn" is the same as clicking an image.  It generates mutated images to all
   unlocked images in the grid.
 - "Recolour" to produce different coloured variants of the selected image
 - "Warp" to produce variants of the image with different spatial co-ordinates
 - "Lock" to prevent an image from being overwritten by spawns from other images
   (select again to toggle).
 - "Big" to produce a blow-up of the image in a single window.
   (either a scrollable view of a fixed size image, or in a freely resizable window)
 - "Save" to save the image in a file (.ppm or .png format).
   Note that this is most useful on a "Big" blown-up image: if you save a small grid image,
   the size you see on the screen is the size you get in the file.
   Note that the save won't be allowed until the full resolution image has been generated.

The Edit menu lets you undo previous full-grid spawns (large but limited
number of levels of undo; note that locking is overriden), and bring up
a dialog to modify the mutation parameters (see advanced usage below).

An area on the status bar shows how many "tasks" are outstanding.  
Each "task" is the recomputation of an image at some resolution.
Tasks are prioritised by their number of pixels (small image => higher priority).
This is why, if the main grid is still recomputing, a "big" image 
will appear to freeze after it has reached a certain resolution, 
at least until other lower resolution tasks have completed. 

Currently the software runs 2 compute threads by default so those of 
you lucky enough to have dual processor machines should see some 
benefit (or see it deadlock :^)... Be warned that I haven't had 
an opportunity to test on more than a single processor.  

ADVANCED USAGE
==============
To understand what is going on, you need to know that the images are constructed
from trees of function nodes acting on image co-ordinates to produce a colour.
The properties of the tree are mutated to produce variant images.

The mutation parameters are under control from the dialog accessible via the
Edit->Mutation Parameters... menu, and also from buttons on the status bar).

There are two kinds of mutation: perturbations to the magnitude of constants, 
and structural mutations which rearrage the function tree of an image.  
Two kinds of structural mutations are currently implemented:
replacement of a function branch by a new random stub (a "Glitch" mutation),
and a random shuffle of a node's arguments.  The probability (per function node)
of these mutations is controlled from spinboxes on the dialog (expressed as 
chances-in-a-million), as is the size of perturbations from constant.

I tend to think of the constant perturbations as being a thermal effect (hence
the "heat" and "cool" buttons), while structural alterations are more drastic and
are caused by high energy gamma rays or something (hence "irradiate" and "shield" 
buttons to adjust the probability of structual mutations). 

Anway why would you want to change the mutation parameters from the initial defaults ?
Basically, if you're getting too much variation in spawned images (this tends to happen
after many generations of images, by which time the function trees have grown quite large
and therefore are experiencing a lot of mutations), cool and/or shield.
If all the images look too similar, heat and/or irradiate.

INSTALL
=======
Doing 
  make install
will attempt to install the executable in /usr/local/bin

BUILDING CODE DOCUMENTATION
===========================
If you have doxygen (and graphviz NB!!!) and want to build
the source code documentation  subdirectory too, execute 
  make doc
The code documentation then appears in ./doc/html/

CLEANING UP
===========
To clean up this directory, do
  make clean
which deletes everything except the doc directory.
Do 
  make realclean
to get rid of everything including the doc directory.

GRIPE
=====
I originally wanted to use gtkmm for this app 'cos Gtk looks so sexy when themed, and I'd already done
a Qt app ("fracplanet") and wanted to judge for myself how gtkmm compared.  However, I couldn't find 
any gtkmm RPMs for RedHat 8 (I did find some old ones on "freshrpms", but when I tried to use them RH's 
pkg-conf didn't seem to be set up right to actually build anything).  Sure, I could have probably 
compiled the sources, but most people aren't going to bother and so if I want to write software
people will actually download and try out then it's going to have to use the libs which come with the
distros, or at least which have hassle free ready-to-go RPMs available.
Oh well, maybe next time... but Qt is really growing on me.
