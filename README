INTRODUCTION
============
Evolvotron is interactive "generative art" software to evolve
images/textures/patterns through  an iterative process of random
mutation and user-selection driven evolution.  If you like lava-lamps,
and still think the Mandelbrot set is cool, this could be the software
for you.

Uses C++, STL & Qt.  Multithreaded.

Home page: http://www.bottlenose.demon.co.uk/share/evolvotron

Author: timday at timday dot com

If you manage to make practical use of evolvotron, especially
if evolvotron derived imagery makes it into print or other
mass media, I'd love to hear about it: please email!

Have fun
Tim

LICENSE
=======
This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

[The license should be in the LICENSE file in the same directory as this
README]

BUILDING
========
This has only been tested on RedHat8.0, but there's no reason it shouldn't
work on any platform with a correctly set up qmake (which is all the
configure step does, using the specification in evolvotron.pro).

You do NOT need to be root until the (optional) install stage.
You can either do the "traditional"

  ./configure
  make

or just have both done for you by doing

  ./BUILD

[IMPORTANT: Sorry, this version makes more use of C++ templates which in my
experience are rather prone to breaking between compiler versions.
It all compiles fine with the g++ 3.2 which comes with RedHat 8.0, but if
you get compilation errors with other versions of gcc please let me know.]

Anyway, this should give you an "evolvotron" executable which you can run with
  ./evolvotron
or install where you like.

BUILD PROBLEMS/OPTIONS
========================
If qmake complains about an undefined QMAKESPEC, you probably need to do
something like
export QMAKESPEC=linux=g++
as appropriate to your architecture; consult the qmake documentation for
recognised values (or look for your qt installation's "mkspecs" directory
and try the name of the appropriate subdirectory).  In this case you
will probably need to set your QTDIR too.  These need to be defined
when you execute both the qmake and the make (so make life easy and
define them in your .bashrc or .bash_profile).
[This problem was reported on Mandrake 9.0]

Note that qmake's default optimisation settings are pretty conservative
(-O2 -march=i386).  IF you have a chip with sse instuctions or similar, 
then I would highly recomend uncommenting and/or editing the couple of
lines modifying  QMAKE_CXXFLAGS_RELEASE near the start of "evolvotron.pro"

[Other platforms: 
Linc Davis reports:
  "I built it on a Mac with Qt installed via Fink (if you know what that is.)
  All I had to do is add '$(QTDIR)/include/qt' to the include path and then
  run make."
]

INSTALL
=======
Doing 
  make install
will attempt to install the executable in /usr/local/bin
(Hint: "su" first).

USAGE
=====
You will need a fast machine, or patience.

Command line options:
  -geometry <width>x<height> : usual Qt/X option to set on-screen size in pixels
  -g <rows> <cols> : sets number of image display cells (defaults 8 by 6)
  -t <threads> : sets number of compute threads (defaults to 2)

On starting the app, a grid of images is displayed.
(For some reason the default is quite small: you'll 
probably want to resize/fullscreen the window to be larger).

Repeat the following until bored:
 - Click (singleclick) on an image you like to 
   spawn the next generation of its mutant offspring.
 - Wait until variations on it are regenerated in sufficient 
   detail that you can decide which one you like best again.

IMPORTANT: Initially you should select images with some sort of variation.
It can take quite a few generations before you get something more interesting
than a simple gradient.  If you select a uniform image, you may get stuck
in a degenerate zone with little to mutate and therefore little chance of
escape to a more interesting area.  You can always reset/restart from the
"File" menu (the difference is that "reset" also resets the mutation
parameters to their default values).

Right clicking on an image gets you a few more options:
 - "Respawn" regenerates just the current image from whatever it was
   spawned from (and using recolour or warp, if that's what was used
   to produce it).
   The main use of this is to make your grid of images look nice
   by regenerating any which aren't up to scratch.
 - "Spawn" is the same as clicking an image.  It generates mutated
   images to all unlocked images in the grid.
 - "Recolour" to produce different coloured variants of the selected image
 - "Warp" to produce variants of the image with different spatial co-ordinates
 - "Lock" to prevent an image from being overwritten by spawns from other
   images (select again to toggle).
 - "Big" to produce a blow-up of the image in a single window.
   (either a scrollable view of a fixed size image, or in a freely
   resizable window)
 - "Save" to save the image in a file (.ppm or .png format).
   Note that this is most useful on a "Big" blown-up image: if you
   save a small grid image, the size you see on the screen is the size
   you get in the file.  Note that the save won't be allowed until the
   full resolution image has been generated.

The Edit menu lets you undo previous full-grid spawns (there is a
large but limited number of levels of undo; note that locking is
overriden), and bring up a dialog to modify the mutation parameters
(see "useful tips" and "advanced usage" below).

An area on the status bar shows how many "tasks" are outstanding.  
Each "task" is the recomputation of an image at some resolution.
Tasks are prioritised by their number of pixels  (small image =>higher
priority).  This is why, if the main grid is still recomputing, a "big" 
image  will appear to freeze after it has reached a certain resolution, 
at least until other lower resolution tasks have completed. 

Currently the software runs 2 compute threads by default so those of 
you lucky enough to have dual processor machines should see some 
benefit (or see it deadlock :^)... Be warned that I haven't had 
an opportunity to test it on more than a single processor.  

ADVANCED USAGE
==============
To understand what is going on, you need to know that the images are
constructed from trees of function nodes acting on image co-ordinates to
produce a colour.  The properties of the tree are mutated to produce
variant images.

The mutation parameters are under control from the dialog accessible via the
Edit->Mutation Parameters... menu, and also from buttons on the status bar).

There are two kinds of mutation: perturbations to the magnitude of constants, 
and structural mutations which rearrage the function tree of an image.  
Three types of structural mutations are currently implemented:
replacement of a function branch by a new random stub (a "Glitch" mutation),
a random shuffle of a node's arguments, and the insertion of random nodes
between a node and it's children.  The probability (per function node)
of these mutations is controlled from spinboxes on the dialog (expressed as 
chances-in-a-million), as is the size of perturbations from constant.

I tend to think of the constant perturbations as being a thermal effect (hence
the "heat" and "cool" buttons), while structural alterations are more drastic
and are caused by high energy gamma rays or something (hence "irradiate"
and "shield"  buttons to adjust the probability of structual mutations). 

So why would you want to change the mutation parameters from the initial
defaults ?  Basically, if you're getting too much variation in spawned images 
(this tends to happen after many generations of images, by which time the
function trees have grown quite large and therefore are experiencing a lot
of mutations), cool and/or shield.
If all the images look too similar, heat and/or irradiate.

2 types of function node are considered fundamental: constant nodes
(which return a constant) and position nodes (which should really be
called identity nodes) which return their position argument.  There
are two slider controls to affect things realted to these:
 - "proportion constant" controls the proportion of fundamental nodes
   which are constants.  Changing this from its default value of 0.5 doesn't
   seem to have much effect.
 - "identity supression" causes all identity nodes to actually include a
   random transform; the main effect of this is that images are less commonly
   obviously centred on the origin or aligned with the axes.  I think this
   is a good thing, so identity supression is at 1.0 by default.

OTHER OPTIONS
=============
On the mutation parameters dialog there are tick boxes to enable two classes of
function which are disabled by default.  These are "iterative" functions and
"fractal" functions (Mandelbrot and Julia set type things).  The main reason
for their being optional is that, in the former case they're expensive, and
in the latter case they're expensive and ugly.  Note that if fractal functions
are enabled, then iterative functions are enabled too.

BUILDING CODE DOCUMENTATION
===========================
If you have doxygen (and graphviz NB!!!) and want to build
the source code documentation too, execute 
  make doc
The code documentation then appears in ./doc/html/

CLEANING UP
===========
To clean up this directory, do
  make clean
which deletes everything except the doc directory.
Do 
  make realclean
to get rid of everything including the doc directory.
